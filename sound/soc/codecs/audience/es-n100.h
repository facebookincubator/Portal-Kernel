/*
 * es-n100.h  --  Audience esn100 ALSA SoC Dummy Audio driver
 *
 * Copyright 2011 Audience, Inc.
 *
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#ifndef _ES_N100_H
#define _ES_N100_H

#if defined(CONFIG_SND_SOC_ES_SLIM)
#define ES_NUM_CODEC_SLIM_DAIS       6
#define ES_NUM_CODEC_I2S_DAIS	0
#else
#define ES_NUM_CODEC_SLIM_DAIS       0
#define ES_NUM_CODEC_I2S_DAIS	2
#endif

#define ES_NUM_CODEC_DAIS	(ES_NUM_CODEC_SLIM_DAIS + \
		ES_NUM_CODEC_I2S_DAIS)

/*
 * Device parameter command codes
 */
#define ESN100_DEV_PARAM_OFFSET		0x2000
#define ESN100_GET_DEV_PARAM		0x800b
#define ESN100_SET_DEV_PARAM_ID		0x900c
#define ESN100_SET_DEV_PARAM		0x900d

/*
 * Algoithm parameter command codes
 */
#define ESN100_ALGO_PARAM_OFFSET		0x0000
#define ESN100_GET_ALGO_PARAM			0x8016
#define ESN100_SET_ALGO_PARAM_ID		0x9017
#define ESN100_SET_ALGO_PARAM			0x9018

#define ES_GET_EVENT					0x806D
#define ESN100_SET_POWER_LEVEL			0x8011
#define ESN100_GET_POWER_LEVEL			0x8012
#define ESN100_POWER_LEVEL_5			0x0005
#define ESN100_PREST_SINGLE_DOWNLOAD 	0
#define ESN100_FW_DOWNLOAD_MAX_RETRY	5

enum {
	ESN100_MIC_CONFIG,
	ESN100_AEC_MODE,
	ESN100_VEQ_ENABLE,
	ESN100_DEREVERB_ENABLE,
	ESN100_DEREVERB_GAIN,
	ESN100_BWE_ENABLE,
	ESN100_BWE_HIGH_BAND_GAIN,
	ESN100_BWE_MAX_SNR,
	ESN100_BWE_POST_EQ_ENABLE,
	ESN100_SLIMBUS_LINK_MULTI_CHANNEL,
	ESN100_POWER_STATE,
	ESN100_RUNTIME_PM,
	ESN100_FE_STREAMING,
	ESN100_PRESET,
	ESN100_ALGO_PROCESSING,
	ESN100_ALGO_SAMPLE_RATE,
	ESN100_CHANGE_STATUS,
	ESN100_MIX_SAMPLE_RATE,
	ESN100_FW_FIRST_CHAR,
	ESN100_FW_NEXT_CHAR,
	ESN100_EVENT_RESPONSE,
	ESN100_VOICE_SENSE_ENABLE,
	ESN100_VOICE_SENSE_SET_KEYWORD,
	ESN100_VOICE_SENSE_EVENT,
	ESN100_VOICE_SENSE_TRAINING_MODE,
	ESN100_VOICE_SENSE_DETECTION_SENSITIVITY,
	ESN100_VOICE_ACTIVITY_DETECTION_SENSITIVITY,
	ESN100_VOICE_SENSE_TRAINING_RECORD,
	ESN100_VOICE_SENSE_TRAINING_STATUS,
	ESN100_VOICE_SENSE_TRAINING_MODEL_LENGTH,
	ESN100_VOICE_SENSE_DEMO_ENABLE,
	ESN100_VS_STORED_KEYWORD,
	ESN100_VS_INT_OSC_MEASURE_START,
	ESN100_VS_INT_OSC_MEASURE_STATUS,
	ESN100_CVS_PRESET,
	ESN100_RX_ENABLE,
	ESN100_API_ADDR_MAX,
};

/*
 * addresses
 * Ensure digital addresses do not overlap with analog
 */
enum {
	ES_CHANGE_STATUS = 55,
	ES_FW_FIRST_CHAR,
	ES_FW_NEXT_CHAR,
	ES_GET_SYS_INTERRUPT,
	ES_ACCDET_CONFIG,
	ES_GET_ACCDET_STATUS,
	ES_BUTTON_DETECTION_ENABLE,
	ES_BUTTON_SERIAL_CONFIG,
	ES_BUTTON_PARALLEL_CONFIG,
	ES_BUTTON_DETECTION_RATE,
	ES_BUTTON_PRESS_SETTLING_TIME,
	ES_BUTTON_BOUNCE_TIME,
	ES_BUTTON_DETECTION_LONG_PRESS_TIME,
	ES_ALGO_SAMPLE_RATE,
	ES_ALGORITHM,
	ES_BUTTON_CTRL1,
	ES_BUTTON_CTRL2,
	ES_BUTTON_CTRL3,
	ES_BUTTON_CTRL4,

	ES_PRIMARY_MUX,
	ES_SECONDARY_MUX,
	ES_TERTIARY_MUX,
	ES_AECREF1_MUX,
	ES_FEIN_MUX,
	ES_UITONE1_MUX,
	ES_UITONE2_MUX,
	ES_UITONE3_MUX,
	ES_UITONE4_MUX,

	ES_AUDIN1_MUX,
	ES_AUDIN2_MUX,
	ES_MMUITONE1_MUX,
	ES_MMUITONE2_MUX,
	ES_PASSIN1_MUX,
	ES_PASSIN2_MUX,
	ES_PASSIN3_MUX,
	ES_PASSIN4_MUX,

	ES_DAC0_0_MUX,
	ES_DAC0_1_MUX,
	ES_DAC1_0_MUX,
	ES_DAC1_1_MUX,

	ES_PCM0_0_MUX,
	ES_PCM0_1_MUX,
	ES_PCM0_2_MUX,
	ES_PCM0_3_MUX,
	ES_PCM1_0_MUX,
	ES_PCM1_1_MUX,
	ES_PCM1_2_MUX,
	ES_PCM1_3_MUX,
	ES_PCM2_0_MUX,
	ES_PCM2_1_MUX,
	ES_PCM2_2_MUX,
	ES_PCM2_3_MUX,

	ES_SBUSTX0_MUX,
	ES_SBUSTX1_MUX,
	ES_SBUSTX2_MUX,
	ES_SBUSTX3_MUX,
	ES_SBUSTX4_MUX,
	ES_SBUSTX5_MUX,

	ES_CODEC_VALUE,
	ES_POWER_STATE,
	ES_VS_INT_OSC_MEASURE_START,
	ES_VS_INT_OSC_MEASURE_STATUS,
	ES_EVENT_RESPONSE,
	ES_VOICE_SENSE_SET_KEYWORD,
	ES_VOICE_SENSE_EVENT,
	ES_VOICE_SENSE_TRAINING_MODE,
	ES_VOICE_SENSE_DETECTION_SENSITIVITY,
	ES_VOICE_ACTIVITY_DETECTION_SENSITIVITY,
	ES_VS_STORED_KEYWORD,
	ES_VOICE_SENSE_TRAINING_RECORD,
	ES_VOICE_SENSE_TRAINING_STATUS,
	ES_CVS_PRESET,
	ES_STEREO_WIDTH,
	ES_API_ADDR_MAX,
};

int esn100_init(struct escore_priv *escore);
#endif /* ES_N100_H */
